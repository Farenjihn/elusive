[env]
CARGO_MAKE_COVERAGE_PROVIDER = "tarpaulin"
ELUSIVE_CONFIG = ""
ELUSIVE_CONFDIR = ""
OUTPUT_DIR = "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/output"

[tasks.microcode]
description = "Run elusive to generate a microcode bundle"
category = "Elusive"
cwd = "elusive"
command = "cargo"
args = [
    "run",
    "--",
    "microcode",
    "--config",
    "config/ucode.toml",
    "--output",
    "${OUTPUT_DIR}/microcode"
]

[tasks.initramfs]
description = "Run elusive to generate an initramfs"
category = "Elusive"
cwd = "elusive"
command = "cargo"
args = [
    "run",
    "--",
    "initramfs",
    "--config",
    "${ELUSIVE_CONFIG}",
    "--confdir",
    "${ELUSIVE_CONFDIR}",
    "--ucode",
    "${OUTPUT_DIR}/microcode",
    "--output",
    "${ELUSIVE_OUTPUT}",
]

[tasks.initramfs-basic.env]
ELUSIVE_OUTPUT = "${OUTPUT_DIR}/initramfs.basic"
ELUSIVE_CONFIG = "config/basic.toml"

[tasks.initramfs-basic]
description = "Generate a basic initramfs with a custom init script"
category = "Elusive"
run_task = "initramfs"

[tasks.initramfs-systemd.env]
ELUSIVE_OUTPUT = "${OUTPUT_DIR}/initramfs.systemd"
ELUSIVE_CONFIG = "config/systemd.toml"
ELUSIVE_CONFDIR = "config/systemd.d"
LD_LIBRARY_PATH = "/lib/systemd"

[tasks.initramfs-systemd]
description = "Generate a systemd based initramfs"
category = "Elusive"
run_task = "initramfs"

[tasks.pre-initramfs-mkdir]
category = "Elusive"
command = "mkdir"
args = [
    "-p",
    "${OUTPUT_DIR}",
]

[tasks.pre-initramfs-build]
category = "Elusive"
run_task = { name = "build", fork = true }

[tasks.pre-initramfs-flow]
category = "Elusive"
dependencies = [
    "pre-initramfs-mkdir",
    "pre-initramfs-build",
]

[tasks.initramfs-flow]
category = "Elusive"
workspace = false
dependencies = [
    "pre-initramfs-flow",
    "microcode",
    "initramfs-basic",
    "initramfs-systemd",
]

[tasks.mkrootfs]
category = "Elusive"
script = '''
#!/bin/sh

set -e

pushd shim
cargo build
popd

rootfs="${OUTPUT_DIR}/rootfs"
squashfs="${OUTPUT_DIR}/root.squashfs"

mkdir -p ${rootfs}/{dev,etc,proc,run,sbin,sys}
touch ${rootfs}/etc/os-release

cp shim/target/x86_64-unknown-linux-musl/debug/shim ${rootfs}/sbin/init

[ -f ${squashfs} ] && rm ${squashfs}
mksquashfs ${rootfs} ${squashfs}

rm -r ${rootfs}
'''

[tasks.qemu]
description = "Run QEMU to test an initramfs generated with elusive"
category = "Elusive"
script = '''
#!/bin/sh

clean() {
    [ -f swtpm.state ] && rm swtpm.state
    [ -e swtpm.sock ] && rm swtpm.sock
}
trap clean EXIT

swtpm socket \
    --tpmstate=backend-uri=file://swtpm.state \
    --ctrl type=unixio,path=swtpm.sock \
    --tpm2 &

qemu-system-x86_64 \
    -machine pc-q35-5.0,accel=kvm \
    -cpu host \
    -m 512 \
    -no-reboot \
    -nographic \
    -chardev socket,id=chrtpm,path=swtpm.sock \
    -tpmdev emulator,id=tpm0,chardev=chrtpm \
    -device tpm-tis,tpmdev=tpm0 \
    -device isa-debug-exit,iobase=0xf4,iosize=0x04 \
    -drive file=${OUTPUT_DIR}/root.squashfs,if=virtio,format=raw \
    -kernel /boot/vmlinuz-linux \
    -initrd ${QEMU_INITRAMFS} \
    -append "console=ttyS0,115200 panic=-1 root=/dev/vda rootfstype=squashfs systemd.default_timeout_start_sec=15"

ret=$?
if [ ${ret} -ne 85 ]; then
    echo "QEMU exited with code=${ret}"
    exit 1
fi
'''

[tasks.qemu-basic.env]
QEMU_INITRAMFS = "${OUTPUT_DIR}/initramfs.basic"

[tasks.qemu-basic]
description = "Run QEMU to test the systemd based initramfs"
category = "Elusive"
run_task = "qemu"

[tasks.qemu-systemd.env]
QEMU_INITRAMFS = "${OUTPUT_DIR}/initramfs.systemd"

[tasks.qemu-systemd]
description = "Run QEMU to test the systemd based initramfs"
category = "Elusive"
run_task = "qemu"

[tasks.qemu-flow]
description = "Run both elusive and QEMU"
category = "Elusive"
workspace = false
dependencies = [
    "initramfs-flow",
    "mkrootfs",
    "qemu-basic",
    "qemu-systemd",
]
